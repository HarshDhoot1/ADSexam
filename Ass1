#using array
#include <stdio.h>
#define MAX_NODES 10
char tree[MAX_NODES];
int root(char key) {
    if (tree[0] != '\0')
        printf("Tree already had root");
    else
        tree[0] = key;
    return 0;
}
int left_set(char key, int parent) {
    if (tree[parent] == '\0' || (parent * 2) + 1 >= MAX_NODES)
        printf("\nCan't set left child, invalid parent index or array bounds exceeded");
    else
        tree[(parent * 2) + 1] = key;
    return 0;
}
int right_set(char key, int parent) {
    if (tree[parent] == '\0' || (parent * 2) + 2 >= MAX_NODES)
        printf("\nCan't set right child, invalid parent index or array bounds exceeded");
    else
        tree[(parent * 2) + 2] = key;
    return 0;
}
int print_tree() {
    printf("\n");
    for (int i = 0; i < MAX_NODES; i++) {
        if (tree[i] != '\0')
            printf("%c", tree[i]);
        else
            printf("-");
    }
    return 0;
}
int main() {
    int numNodes;
    char key;
    int parent;
    printf("Enter number of nodes for tree: ");
    scanf("%d", &numNodes);
    for (int i = 0; i < numNodes; i++) {
        printf("Enter key for node %d: ", i);
        scanf(" %c", &key);
        if (i == 0) {
            root(key);
        } else {
            printf("Enter parent index for node %c: ", key);
            scanf("%d", &parent);
            if (parent < 0 || parent >= MAX_NODES) {
                printf("Invalid parent index. Please enter a valid index.\n");
                i--;
            } else {
                if (i % 2 == 1) {
                    left_set(key, parent);
                } else {
                    right_set(key, parent);
                }
            }
        }
    }
    print_tree();


//using linked list

#include<stdio.h>
#include<stdlib.h>
struct Node {
    int data; 
    struct Node* left; 
    struct Node* right; 
};
struct Node* newNode(int data) {
    struct Node* node = (struct Node*) malloc(sizeof(struct Node)); 
    if (node != NULL) {
        node->data = data; 
        node->left = NULL; 
        node->right = NULL; 
        printf("New node created with data: %d\n", data);
    } else {
        printf("Memory allocation failed for the new node\n");
    }
    return node; 
}
void print_In_Order(struct Node* node) {
    if (node == NULL) 
        return; 
    print_In_Order(node->left);
    printf("%d ", node->data); 
    print_In_Order(node->right); 
}
struct Node* buildBinaryTree() {
    struct Node* root = NULL;
    int numNodes, data;
    printf("Enter the number of nodes you want in the binary tree: ");
    scanf("%d", &numNodes);
    if (numNodes <= 0) {
        printf("Invalid number of nodes. Exiting.\n");
        exit(1);
    }
    printf("Enter the value for the root: ");
    scanf("%d", &data);
    root = newNode(data);
    
    for (int i = 1; i < numNodes; i++) {
        printf("Enter the value for node %d: ", i + 1);
        scanf("%d", &data);
        insertNode(root, data);
    }
    return root;
}
void insertNode(struct Node* root, int data) {
    if (root == NULL) return;
    if (data < root->data) {
        if (root->left == NULL) {
            root->left = newNode(data);
        } else {
            insertNode(root->left, data);
        }
    } else {
        if (root->right == NULL) {
            root->right = newNode(data);
        } else {
            insertNode(root->right, data);
        }
    }
}
int main() {
    struct Node* root = buildBinaryTree();

    printf("Traversal of the binary tree: \n");
    print_In_Order(root); // Print the nodes of the Binary Tree in In-Order traversal
    return 0; 
}
